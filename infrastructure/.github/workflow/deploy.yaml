name: Deploy Azure Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
   permissions:
      id-token: write  # This is required for OIDC
      contents: read

    steps:
      - name: 'Azure login via OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}  # This is your app_id from above
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Bicep
        uses: anthony-c-martin/setup-bicep@v0.1

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create resource group if needed
        run: |
          if ! az group show --name $RESOURCE_GROUP &>/dev/null; then
            az group create --name $RESOURCE_GROUP --location $LOCATION
          fi

      - name: Process cloud-init templates
        run: |
          mkdir -p temp
          export app_server_ip=${{ env.APP_SERVER_IP }}
          export app_server_port=${{ env.APP_SERVER_PORT }}
          export github_org=${{ env.GITHUB_ORG }}
          export github_repo_name=${{ env.GITHUB_REPO_NAME }}
          export github_token=${{ secrets.GITHUB_RUNNER_TOKEN }}
          export app_name=${{ env.APP_NAME }}
          export admin_username=${{ env.ADMIN_USERNAME }}

          envsubst < infrastructure/cloud-init/reverse-proxy.yaml.template > temp/reverse-proxy.yaml
          envsubst < infrastructure/cloud-init/app-server.yaml.template > temp/app-server.yaml
          cp infrastructure/cloud-init/bastion.yaml temp/bastion.yaml

      - name: Validate Bicep files
        run: |
          az bicep build --file infrastructure/bicep/main.bicep

      - name: Deploy infrastructure
        run: |
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file infrastructure/bicep/main.bicep \
            --parameters location=${{ env.LOCATION }} \
            --parameters adminUsername=${{ env.ADMIN_USERNAME }} \
            --parameters sshPublicKey="${{ secrets.SSH_PUBLIC_KEY }}" \
            --parameters appServerIp=${{ env.APP_SERVER_IP }} \
            --parameters appServerPort=${{ env.APP_SERVER_PORT }} \
            --parameters reverseProxyIp=${{ env.REVERSE_PROXY_IP }} \
            --parameters githubOrg=${{ env.GITHUB_ORG }} \
            --parameters githubRepoName=${{ env.GITHUB_REPO_NAME }} \
            --parameters githubToken=${{ secrets.GITHUB_RUNNER_TOKEN }} \
            --parameters appName=${{ env.APP_NAME }}

      - name: Get deployment outputs
        id: deployment-outputs
        run: |
          bastion_ip=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name bastionDeployment \
            --query properties.outputs.publicIp.value \
            -o tsv)

          reverse_proxy_ip=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name reverseProxyDeployment \
            --query properties.outputs.publicIp.value \
            -o tsv)

          echo "BASTION_IP=$bastion_ip" >> $GITHUB_ENV
          echo "REVERSE_PROXY_IP=$reverse_proxy_ip" >> $GITHUB_ENV

      - name: Clean up temporary files
        run: rm -rf temp

      - name: Output deployment information
        run: |
          echo "Deployment completed successfully!"
          echo "Bastion Host IP: ${{ env.BASTION_IP }}"
          echo "Reverse Proxy IP: ${{ env.REVERSE_PROXY_IP }}"
          echo "App Server Internal IP: ${{ env.APP_SERVER_IP }}"

      - name: Post deployment status to GitHub
        uses: actions/github-script@v5
        with:
          script: |
            const issue_number = context.issue.number;
            if (issue_number) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: `âœ… Infrastructure deployed successfully!\n- Bastion Host: ${process.env.BASTION_IP}\n- Reverse Proxy: ${process.env.REVERSE_PROXY_IP}\n- App Server: ${process.env.APP_SERVER_IP}`
              });
            }
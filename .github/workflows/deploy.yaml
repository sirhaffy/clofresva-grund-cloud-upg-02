name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_ansible:
        description: 'Skip Ansible configuration'
        required: false
        default: 'false'

      full_deployment:
        description: 'Run full infrastructure deployment'
        required: false
        default: 'false'

# Environment variables
env:
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  LOCATION: northeurope
  REPO_NAME: ${{ secrets.REPO_NAME }}
  # Note: We don't set RUNNER_TOKEN here because it's generated dynamically

jobs:
  # Check for changes to determine what needs to be run.
  check-changes:
    name: Check Changed Files
    runs-on: ubuntu-latest
    outputs:
      run_bicep: ${{ steps.filter.outputs.bicep }}
      run_ansible: ${{ steps.filter.outputs.ansible }}
      run_webapp: ${{ steps.filter.outputs.webapp }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Set outputs based on changed files
        id: filter
        run: |
          # Default to not running unless specified or changes detected
          echo "bicep=${{ github.event.inputs.full_deployment == 'true' }}" >> $GITHUB_OUTPUT
          echo "ansible=${{ github.event.inputs.full_deployment == 'true' && github.event.inputs.skip_ansible != 'true' }}" >> $GITHUB_OUTPUT
          echo "webapp=true" >> $GITHUB_OUTPUT  # Default to always run webapp

          # Check each changed file
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            # Infrastructure changes (Bicep)
            if [[ $file == infrastructure/* ]]; then
              echo "bicep=true" >> $GITHUB_OUTPUT
            fi

            # Configuration changes (Ansible)
            if [[ $file == ansible/* ]]; then
              echo "ansible=true" >> $GITHUB_OUTPUT
            fi

            # Workflow changes (might affect both)
            if [[ $file == .github/workflows/* ]]; then
              echo "bicep=true" >> $GITHUB_OUTPUT
              echo "ansible=true" >> $GITHUB_OUTPUT
            fi
          done

          # If explicitly skipping Ansible, override any detection
          if [[ "${{ github.event.inputs.skip_ansible }}" == "true" ]]; then
            echo "ansible=false" >> $GITHUB_OUTPUT
          fi

          # Debug outputs
          echo "Changes detected:"
          echo "  Bicep: ${{ steps.filter.outputs.bicep || 'false' }}"
          echo "  Ansible: ${{ steps.filter.outputs.ansible || 'false' }}"
          echo "  WebApp: ${{ steps.filter.outputs.webapp || 'false' }}"

  # Check if dotnet app files were changed.
  deploy-infrastructure:
    name: Deploy Azure Infrastructure
    needs: check-changes
    if: ${{ needs.check-changes.outputs.run_bicep == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      BASTION_IP: ${{ steps.outputs.outputs.BASTION_IP }}
      APP_IP: ${{ steps.outputs.outputs.APP_IP }}
      MONGODB_CONNECTION_STRING: ${{ steps.outputs.outputs.MONGODB_CONNECTION_STRING }}
      STORAGE_ACCOUNT: ${{ steps.outputs.outputs.STORAGE_ACCOUNT }}
      BLOB_ENDPOINT: ${{ steps.outputs.outputs.BLOB_ENDPOINT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Använd vår återanvändbara SSH-uppsättning
      - name: Set up SSH keys
        uses: ./.github/actions/setup-ssh
        with:
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Generate fresh runner token
        id: generate_token
        run: |
          echo "Getting fresh runner token..."
          TOKEN=$(curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO_NAME }}/actions/runners/registration-token \
            | jq -r .token)

          echo "RUNNER_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "Fresh token generated!"

      - name: Deploy Infrastructure
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./infrastructure/bicep/main.bicep
          parameters: >
            projectName=${{ env.PROJECT_NAME }}
            adminUsername=azureuser
            sshPublicKey="${{ secrets.SSH_PUBLIC_KEY }}"
            location=${{ env.LOCATION }}
          deploymentName: main

      - name: Get Deployment Outputs
        id: outputs
        run: |
          echo "Getting deployment outputs..."
          DEPLOYMENT_OUTPUTS=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "main" \
            --query properties.outputs -o json)

          # Extract values from outputs
          BASTION_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.bastionHostIp.value')
          PROXY_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.reverseProxyIp.value')
          APP_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.appServerPrivateIp.value')
          STORAGE_ACCOUNT=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.storageAccountName.value')
          BLOB_ENDPOINT=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.blobEndpoint.value')
          MONGODB_CONNECTION_STRING=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.dotNetMongoConnectionString.value // ""')

          # Set outputs for other jobs to use
          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_OUTPUT
          echo "APP_IP=$APP_IP" >> $GITHUB_OUTPUT
          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "BLOB_ENDPOINT=$BLOB_ENDPOINT" >> $GITHUB_OUTPUT
          echo "MONGODB_CONNECTION_STRING=$MONGODB_CONNECTION_STRING" >> $GITHUB_OUTPUT

          # Also set environment variables for current job
          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_ENV
          echo "APP_IP=$APP_IP" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV
          echo "BLOB_ENDPOINT=$BLOB_ENDPOINT" >> $GITHUB_ENV
          echo "MONGODB_CONNECTION_STRING=$MONGODB_CONNECTION_STRING" >> $GITHUB_ENV

      - name: Ensure Ansible config exists
        run: |
          mkdir -p ./ansible
          echo "[defaults]" > ./ansible/ansible.cfg
          echo "host_key_checking = False" >> ./ansible/ansible.cfg
          echo "roles_path = ./ansible/roles" >> ./ansible/ansible.cfg

          # Set the environment variable
          echo "ANSIBLE_CONFIG=./ansible/ansible.cfg" >> $GITHUB_ENV

          # Debug directory structure
          echo "Directory structure:"
          find ./ansible -type d | sort

      - name: Test SSH connectivity
        run: |
          # Check if environment variables are available
          if [ -z "${{ env.APP_IP }}" ] || [ -z "${{ env.BASTION_IP }}" ]; then
            echo "WARNING: IP addresses not set. Using hardcoded values."
            APP_IP="10.0.2.4"
            BASTION_IP="137.116.232.168"
          else
            APP_IP="${{ env.APP_IP }}"
            BASTION_IP="${{ env.BASTION_IP }}"
          fi

          # Test SSH to bastion
          echo "Testing SSH to bastion host at $BASTION_IP..."
          ssh -i ~/.ssh/id_clofresvagcupg02 -o ConnectTimeout=10 azureuser@$BASTION_IP "echo 'Bastion connection successful!'" || echo "WARNING: Bastion connection failed!"

          # Test SSH to app server via bastion
          echo "Testing SSH to app server at $APP_IP via bastion..."
          ssh -i ~/.ssh/id_clofresvagcupg02 -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP" azureuser@$APP_IP "echo 'App server connection successful!'" || echo "WARNING: App server connection failed!"

      # # Run Ansible to configure servers
      # - name: Run Ansible (Only App Server Setup)
      #   if: ${{ github.event.inputs.skip_ansible != 'true' }}
      #   run: |
      #     # Create inventory file directory
      #     mkdir -p ./ansible/inventories

      #     # Check if environment variables are available
      #     if [ -z "${{ env.APP_IP }}" ] || [ -z "${{ env.BASTION_IP }}" ]; then
      #       echo "WARNING: IP addresses not set. Using hardcoded values."
      #       APP_IP="10.0.2.4"
      #       BASTION_IP="137.116.232.168"
      #     else
      #       APP_IP="${{ env.APP_IP }}"
      #       BASTION_IP="${{ env.BASTION_IP }}"
      #     fi

      #     echo "Using App IP: $APP_IP"
      #     echo "Using Bastion IP: $BASTION_IP"

      #     # Create inventory file with variable interpolation
      #     echo "all:" > ./ansible/inventories/azure_rm.yaml
      #     echo "  hosts:" >> ./ansible/inventories/azure_rm.yaml
      #     echo "    app_server:" >> ./ansible/inventories/azure_rm.yaml
      #     echo "      ansible_host: $APP_IP" >> ./ansible/inventories/azure_rm.yaml
      #     echo "      ansible_user: azureuser" >> ./ansible/inventories/azure_rm.yaml
      #     echo "      ansible_ssh_private_key_file: ~/.ssh/id_clofresvagcupg02" >> ./ansible/inventories/azure_rm.yaml
      #     echo "      ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP\"'" >> ./ansible/inventories/azure_rm.yaml
      #     echo "  vars:" >> ./ansible/inventories/azure_rm.yaml
      #     echo "    project_name: ${{ env.PROJECT_NAME }}" >> ./ansible/inventories/azure_rm.yaml
      #     echo "    storage_account: ${{ env.STORAGE_ACCOUNT }}" >> ./ansible/inventories/azure_rm.yaml
      #     echo "    blob_endpoint: ${{ env.BLOB_ENDPOINT }}" >> ./ansible/inventories/azure_rm.yaml
      #     echo "    github_repo: ${{ env.REPO_NAME }}" >> ./ansible/inventories/azure_rm.yaml
      #     echo "    github_runner_token: ***" >> ./ansible/inventories/azure_rm.yaml
      #     # Säkert sätt att lägga till token i filen
      #     sed -i "s/github_runner_token: \*\*\*/github_runner_token: ${{ env.RUNNER_TOKEN }}/" ./ansible/inventories/azure_rm.yaml
      #     echo "    mongodb_connection_string: ${{ env.MONGODB_CONNECTION_STRING }}" >> ./ansible/inventories/azure_rm.yaml

      #     # Debug - visa inventory med maskerat token
      #     echo "Generated inventory file (sensitive data masked):"
      #     cat ./ansible/inventories/azure_rm.yaml | sed 's/github_runner_token: .*/github_runner_token: ***/'

      #     echo "Waiting for SSH to be available..."
      #     sleep 60

      #     # Run app-server playbook
      #     ansible-playbook -i ./ansible/inventories/azure_rm.yaml ./ansible/playbooks/app-server.yaml

  configure-servers:
    name: Configure Servers with Ansible
    needs: [check-changes, deploy-infrastructure]
    if: ${{ always() && needs.check-changes.outputs.run_ansible == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped') }}
    runs-on: ubuntu-latest
    env:
      BASTION_IP: ${{ needs.deploy-infrastructure.outputs.BASTION_IP }}
      APP_IP: ${{ needs.deploy-infrastructure.outputs.APP_IP }}
      MONGODB_CONNECTION_STRING: ${{ needs.deploy-infrastructure.outputs.MONGODB_CONNECTION_STRING }}
      STORAGE_ACCOUNT: ${{ needs.deploy-infrastructure.outputs.STORAGE_ACCOUNT }}
      BLOB_ENDPOINT: ${{ needs.deploy-infrastructure.outputs.BLOB_ENDPOINT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Använd vår återanvändbara SSH-uppsättning
      - name: Set up SSH keys
        uses: ./.github/actions/setup-ssh
        with:
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Generate new runner token
      - name: Generate new runner token
        id: generate_token
        run: |
          echo "Getting new runner token..."
          TOKEN=$(curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO_NAME }}/actions/runners/registration-token \
            | jq -r .token)

          echo "RUNNER_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "New token generated!"

      - name: Debug environment variables
        run: |
          echo "Environment variables:"
          echo "BASTION_IP: ${{ env.BASTION_IP }}"
          echo "APP_IP: ${{ env.APP_IP }}"
          echo "PROJECT_NAME: ${{ env.PROJECT_NAME }}"
          echo "STORAGE_ACCOUNT: ${{ env.STORAGE_ACCOUNT }}"
          echo "BLOB_ENDPOINT: ${{ env.BLOB_ENDPOINT }}"
          echo "REPO_NAME: ${{ env.REPO_NAME }}"
          echo "RUNNER_TOKEN available: ${{ env.RUNNER_TOKEN != '' }}"
          echo "RUNNER_TOKEN length: ${#RUNNER_TOKEN}"

      - name: Ensure Ansible config exists
        run: |
          mkdir -p ./ansible
          echo "[defaults]" > ./ansible/ansible.cfg
          echo "host_key_checking = False" >> ./ansible/ansible.cfg
          echo "roles_path = ./ansible/roles" >> ./ansible/ansible.cfg

          # Set the environment variable
          echo "ANSIBLE_CONFIG=./ansible/ansible.cfg" >> $GITHUB_ENV

          # Debug directory structure
          echo "Directory structure:"
          find ./ansible -type d | sort

      - name: Test SSH connectivity
        run: |
          # Check if environment variables are available
          if [ -z "${{ env.APP_IP }}" ] || [ -z "${{ env.BASTION_IP }}" ]; then
            echo "WARNING: IP addresses not set. Using hardcoded values."
            APP_IP="10.0.2.4"
            BASTION_IP="137.116.232.168"
          else
            APP_IP="${{ env.APP_IP }}"
            BASTION_IP="${{ env.BASTION_IP }}"
          fi

          # Test SSH to bastion
          echo "Testing SSH to bastion host at $BASTION_IP..."
          ssh -i ~/.ssh/id_clofresvagcupg02 -o ConnectTimeout=10 azureuser@$BASTION_IP "echo 'Bastion connection successful!'" || echo "WARNING: Bastion connection failed!"

          # Test SSH to app server via bastion
          echo "Testing SSH to app server at $APP_IP via bastion..."
          ssh -i ~/.ssh/id_clofresvagcupg02 -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP" azureuser@$APP_IP "echo 'App server connection successful!'" || echo "WARNING: App server connection failed!"

      # Run Ansible to configure servers
      - name: Run Ansible
        run: |
          # Create ansible inventory directory
          mkdir -p ./ansible/inventories

          # Check if environment variables are available
          if [ -z "${{ env.APP_IP }}" ] || [ -z "${{ env.BASTION_IP }}" ]; then
            echo "WARNING: IP addresses not set. Using hardcoded values."
            APP_IP="10.0.2.4"
            BASTION_IP="137.116.232.168"
          else
            APP_IP="${{ env.APP_IP }}"
            BASTION_IP="${{ env.BASTION_IP }}"
          fi

          echo "Using App IP: $APP_IP"
          echo "Using Bastion IP: $BASTION_IP"

          # Create inventory file
          echo "all:" > ./ansible/inventories/azure_rm.yaml
          echo "  hosts:" >> ./ansible/inventories/azure_rm.yaml
          echo "    app_server:" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_host: $APP_IP" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_user: azureuser" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_ssh_private_key_file: ~/.ssh/id_clofresvagcupg02" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP\"'" >> ./ansible/inventories/azure_rm.yaml
          echo "  vars:" >> ./ansible/inventories/azure_rm.yaml
          echo "    project_name: ${{ env.PROJECT_NAME }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    storage_account: ${{ env.STORAGE_ACCOUNT }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    blob_endpoint: ${{ env.BLOB_ENDPOINT }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    github_repo: ${{ env.REPO_NAME }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    github_runner_token: ***" >> ./ansible/inventories/azure_rm.yaml
          # Säkert sätt att lägga till token i filen
          sed -i "s/github_runner_token: \*\*\*/github_runner_token: ${{ env.RUNNER_TOKEN }}/" ./ansible/inventories/azure_rm.yaml
          echo "    mongodb_connection_string: '${{ env.MONGODB_CONNECTION_STRING }}'" >> ./ansible/inventories/azure_rm.yaml

          # Debug - visa inventory med maskerat token
          echo "Generated inventory file (sensitive data masked):"
          cat ./ansible/inventories/azure_rm.yaml | sed 's/github_runner_token: .*/github_runner_token: ***/'

          echo "Waiting for SSH to be available..."
          sleep 60

          # Run app-server playbook
          ansible-playbook -i ./ansible/inventories/azure_rm.yaml ./ansible/playbooks/app-server.yaml

  # Build and deploy the dotnet app as an artifact and upload, if files were changed.
  deploy-app:
    name: Deploy Application as Artifact
    runs-on: ubuntu-latest
    needs: [check-changes, deploy-infrastructure, configure-servers]
    env:
      BASTION_IP: ${{ needs.deploy-infrastructure.outputs.BASTION_IP }}
      APP_IP: ${{ needs.deploy-infrastructure.outputs.APP_IP }}

    # Only run if webapp files were changed and infrastructure deployment was successful.
    if: ${{ always() && needs.check-changes.outputs.run_webapp == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped') &&(needs.configure-servers.result == 'success' || needs.configure-servers.result == 'skipped') }}

    steps:
      # Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Använd vår återanvändbara SSH-uppsättning
      - name: Set up SSH keys
        uses: ./.github/actions/setup-ssh
        with:
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Set up .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # Build the web application
      - name: Build Web App
        run: |
          dotnet publish ./WebbApp/MVC_TestApp.csproj -c Release -o ./publish

          # Verify published files
          echo "Listing published files:"
          ls -la ./publish/

          # Controll that the .dll file exists
          if [ -f "./publish/MVC_TestApp.dll" ]; then
            echo "MVC_TestApp.dll found!"
          else
            echo "WARNING: MVC_TestApp.dll NOT found!"
            echo "Files in directory:"
            find ./publish -name "*.dll"
          fi

      # Deploy the application to the server
      - name: Verify deployment
        run: |
          # Check if environment variables are available
          if [ -z "${{ env.APP_IP }}" ] || [ -z "${{ env.BASTION_IP }}" ]; then
            echo "WARNING: IP addresses not set. Using hardcoded values."
            APP_IP="10.0.2.4"
            BASTION_IP="137.116.232.168"
          else
            APP_IP="${{ env.APP_IP }}"
            BASTION_IP="${{ env.BASTION_IP }}"
          fi

          echo "Verifying deployment..."
          # Wait 10 seconds for the service to stabilize
          sleep 10

          # Check service status
          ssh -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP" -i ~/.ssh/id_clofresvagcupg02 azureuser@$APP_IP "
            echo 'Service status:'
            sudo systemctl status webapp.service || true

            echo 'Running processes:'
            ps aux | grep dotnet

            echo 'Service logs:'
            sudo journalctl -u webapp.service --no-pager -n 20 || true
          "

      # Upload the artifact to the server
      - name: Upload App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: ./publish
          retention-days: 1

  # Deploy the artifact to the app server.
  deploy-to-server:
    name: Deploy Artifact to App-Server
    needs: [deploy-app, deploy-infrastructure, configure-servers]
    runs-on: ubuntu-latest
    env:
      BASTION_IP: ${{ needs.deploy-infrastructure.outputs.BASTION_IP }}
      APP_IP: ${{ needs.deploy-infrastructure.outputs.APP_IP }}

    # Only run if the app was successfully built.
    if: ${{ always() && needs.deploy-app.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Use the SSH setup action.
      - name: Set up SSH keys
        uses: ./.github/actions/setup-ssh
        with:
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug SSH configuration
        run: |
          echo "SSH directory contents:"
          ls -la ~/.ssh/

          echo "SSH config file:"
          cat ~/.ssh/config

          # Check if environment variables are available
          if [ -z "${{ env.APP_IP }}" ] || [ -z "${{ env.BASTION_IP }}" ]; then
            echo "WARNING: IP addresses not set. Using hardcoded values."
            APP_IP="10.0.2.4"
            BASTION_IP="137.116.232.168"
          else
            APP_IP="${{ env.APP_IP }}"
            BASTION_IP="${{ env.BASTION_IP }}"
          fi

          echo "Testing SSH connectivity:"
          echo "Bastion IP: $BASTION_IP"
          ssh -v -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP "echo 'Connected to Bastion'" || echo "Failed to connect to Bastion"

      - name: Download App Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp
          path: ./webapp-files

      - name: Create target directory and deploy app
        run: |
          echo "Creating webapp-files directory..."
          mkdir -p ./webapp-files

          # Check if environment variables are available
          if [ -z "${{ env.APP_IP }}" ] || [ -z "${{ env.BASTION_IP }}" ]; then
            echo "WARNING: IP addresses not set. Using hardcoded values."
            APP_IP="10.0.2.4"
            BASTION_IP="137.116.232.168"
          else
            APP_IP="${{ env.APP_IP }}"
            BASTION_IP="${{ env.BASTION_IP }}"
          fi

          echo "Using App IP: $APP_IP"
          echo "Using Bastion IP: $BASTION_IP"

          echo "Creating target directory on remote server..."
          ssh -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP" -i ~/.ssh/id_clofresvagcupg02 azureuser@$APP_IP "sudo mkdir -p /tmp/webapp && sudo chown azureuser:azureuser /tmp/webapp"

          echo "Copying files to remote server..."
          scp -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP" -i ~/.ssh/id_clofresvagcupg02 -r ./webapp-files/* azureuser@$APP_IP:/tmp/webapp/

          echo "Deploying files on app server..."
          ssh -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP" -i ~/.ssh/id_clofresvagcupg02 azureuser@$APP_IP "
            echo 'Deploying application...'
            sudo systemctl stop webapp.service || echo 'Service not running yet'

            echo 'Removing old files...'
            sudo rm -rf /var/www/app/*
            sudo mkdir -p /var/www/app

            echo 'Copy files to webapp directory...'
            sudo cp -r /tmp/webapp/* /var/www/app/
            sudo chown -R www-data:www-data /var/www/app

            echo 'Listing files in webapp directory...'
            ls -la /var/www/app/

            echo 'Restarting service...'
            sudo systemctl daemon-reload
            sudo systemctl restart webapp.service

            echo 'Service status:'
            sudo systemctl status webapp.service || true
            ps aux | grep dotnet

            echo 'Service logs:'
            sudo journalctl -u webapp.service --no-pager -n 50 || true

            echo 'Application deployed!'
          "
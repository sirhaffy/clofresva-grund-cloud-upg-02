name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_ansible:
        description: 'Skip Ansible configuration'
        required: false
        default: 'false'

      full_deployment:
        description: 'Run full infrastructure deployment'
        required: false
        default: 'false'

# Environment variables
env:
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  LOCATION: northeurope
  REPO_NAME: ${{ secrets.REPO_NAME }}
  # Note: We don't set RUNNER_TOKEN here because it's generated dynamically

jobs:

  # Check for changes to determine what needs to be run.
  check-changes:
    name: Check Changed Files
    runs-on: ubuntu-latest
    outputs:
      run_bicep: ${{ steps.filter.outputs.bicep }}
      run_ansible: ${{ steps.filter.outputs.ansible }}
      run_webapp: ${{ steps.filter.outputs.webapp }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Set outputs based on changed files
        id: filter
        run: |
          # Default to not running unless specified or changes detected
          echo "bicep=${{ github.event.inputs.full_deployment == 'true' }}" >> $GITHUB_OUTPUT
          echo "ansible=${{ github.event.inputs.full_deployment == 'true' && github.event.inputs.skip_ansible != 'true' }}" >> $GITHUB_OUTPUT
          echo "webapp=true" >> $GITHUB_OUTPUT  # Default to always run webapp

          # Check each changed file
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            # Infrastructure changes (Bicep)
            if [[ $file == infrastructure/* ]]; then
              echo "bicep=true" >> $GITHUB_OUTPUT
            fi

            # Configuration changes (Ansible)
            if [[ $file == ansible/* ]]; then
              echo "ansible=true" >> $GITHUB_OUTPUT
            fi

            # Workflow changes (might affect both)
            if [[ $file == .github/workflows/* ]]; then
              echo "bicep=true" >> $GITHUB_OUTPUT
              echo "ansible=true" >> $GITHUB_OUTPUT
            fi
          done

          # If explicitly skipping Ansible, override any detection
          if [[ "${{ github.event.inputs.skip_ansible }}" == "true" ]]; then
            echo "ansible=false" >> $GITHUB_OUTPUT
          fi

          # Debug outputs
          echo "Changes detected:"
          echo "  Bicep: ${{ steps.filter.outputs.bicep || 'false' }}"
          echo "  Ansible: ${{ steps.filter.outputs.ansible || 'false' }}"
          echo "  WebApp: ${{ steps.filter.outputs.webapp || 'false' }}"

  # Deploy infrastructure with Bicep
  deploy-infrastructure:
    name: Deploy Azure Infrastructure
    needs: check-changes
    if: ${{ needs.check-changes.outputs.run_bicep == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      BASTION_IP: ${{ steps.outputs.outputs.BASTION_IP }}
      APP_IP: ${{ steps.outputs.outputs.APP_IP }}
      MONGODB_CONNECTION_STRING: ${{ steps.outputs.outputs.MONGODB_CONNECTION_STRING }}
      STORAGE_ACCOUNT: ${{ steps.outputs.outputs.STORAGE_ACCOUNT }}
      BLOB_ENDPOINT: ${{ steps.outputs.outputs.BLOB_ENDPOINT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Use the shared SSH setup action
      - name: Set up SSH keys
        uses: ./.github/actions/setup-ssh
        with:
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Generate fresh runner token
        id: generate_token
        run: |
          echo "Getting fresh runner token..."
          TOKEN=$(curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO_NAME }}/actions/runners/registration-token \
            | jq -r .token)

          echo "RUNNER_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "Runner token generated successfully"

      - name: Create resource group if it doesn't exist
        run: |
          az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}

      - name: Deploy infrastructure with Bicep
        id: bicep-deploy
        run: |
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file ./infrastructure/bicep/main.bicep \
            --parameters projectName=${{ env.PROJECT_NAME }} \
            --parameters sshPublicKey="${{ secrets.SSH_PUBLIC_KEY }}" \
            --name "main"

      - name: Get deployment outputs
        id: outputs
        run: |
          echo "Getting deployment outputs..."
          DEPLOYMENT_OUTPUTS=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "main" \
            --query properties.outputs -o json)

          # Extract values from outputs
          BASTION_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.bastionHostIp.value')
          PROXY_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.reverseProxyIp.value')
          APP_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.appServerPrivateIp.value')
          STORAGE_ACCOUNT=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.storageAccountName.value')
          BLOB_ENDPOINT=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.blobEndpoint.value')
          MONGODB_CONNECTION_STRING=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.dotNetMongoConnectionString.value // ""')

          # Set environment variables and outputs
          echo "MONGODB_CONNECTION_STRING=$MONGODB_CONNECTION_STRING" >> $GITHUB_ENV
          echo "MONGODB_CONNECTION_STRING=$MONGODB_CONNECTION_STRING" >> $GITHUB_OUTPUT
          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_ENV
          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_OUTPUT
          echo "APP_IP=$APP_IP" >> $GITHUB_ENV
          echo "APP_IP=$APP_IP" >> $GITHUB_OUTPUT
          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "BLOB_ENDPOINT=$BLOB_ENDPOINT" >> $GITHUB_ENV
          echo "BLOB_ENDPOINT=$BLOB_ENDPOINT" >> $GITHUB_OUTPUT

      # Ensure the ansible.cfg file exists with correct roles_path
      - name: Ensure Ansible config exists
        run: |
          if [ ! -f ./ansible/ansible.cfg ]; then
            echo "Creating ansible.cfg..."
            mkdir -p ./ansible
            echo "[defaults]" > ./ansible/ansible.cfg
            echo "host_key_checking = False" >> ./ansible/ansible.cfg
            echo "roles_path = ./ansible/roles" >> ./ansible/ansible.cfg
          else
            echo "ansible.cfg already exists:"
            cat ./ansible/ansible.cfg
          fi

          echo "ANSIBLE_CONFIG=./ansible/ansible.cfg" >> $GITHUB_ENV

      # Test SSH connectivity for early error detection
      - name: Test SSH connectivity
        run: |
          # Test SSH to bastion
          echo "Testing SSH to bastion host at ${{ steps.outputs.outputs.BASTION_IP }}..."
          ssh -i ~/.ssh/id_clofresvagcupg02 -o StrictHostKeyChecking=no -o ConnectTimeout=10 azureuser@${{ steps.outputs.outputs.BASTION_IP }} "echo 'Bastion connection successful!'" || echo "WARNING: Bastion connection failed!"

          # Test SSH to app server via bastion
          echo "Testing SSH to app server at ${{ steps.outputs.outputs.APP_IP }} via bastion..."
          ssh -i ~/.ssh/id_clofresvagcupg02 -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@${{ steps.outputs.outputs.BASTION_IP }}" azureuser@${{ steps.outputs.outputs.APP_IP }} "echo 'App server connection successful!'" || echo "WARNING: App server connection failed!"

      # Run Ansible to configure servers
      - name: Run Ansible (Only App Server Setup)
        if: ${{ github.event.inputs.skip_ansible != 'true' }}
        run: |
          # Make sure we have a directory for the inventory
          mkdir -p ./ansible/inventories

          # Check if APP_IP and BASTION_IP are set
          if [ -z "${{ steps.outputs.outputs.APP_IP }}" ] || [ -z "${{ steps.outputs.outputs.BASTION_IP }}" ]; then
            echo "WARNING: APP_IP or BASTION_IP not set. Using hardcoded values."
            APP_IP="10.0.2.4"
            BASTION_IP="137.116.232.168"
          else
            APP_IP="${{ steps.outputs.outputs.APP_IP }}"
            BASTION_IP="${{ steps.outputs.outputs.BASTION_IP }}"
          fi

          echo "Using App IP: $APP_IP"
          echo "Using Bastion IP: $BASTION_IP"

          echo "Getting fresh runner token and running app server setup (ansible)..."

          # Create inventory file with variable interpolation and explicit IPs
          echo "all:" > ./ansible/inventories/azure_rm.yaml
          echo "  hosts:" >> ./ansible/inventories/azure_rm.yaml
          echo "    app_server:" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_host: $APP_IP" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_user: azureuser" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_ssh_private_key_file: ~/.ssh/id_clofresvagcupg02" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP\"'" >> ./ansible/inventories/azure_rm.yaml
          echo "  vars:" >> ./ansible/inventories/azure_rm.yaml
          echo "    project_name: ${{ env.PROJECT_NAME }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    storage_account: ${{ env.STORAGE_ACCOUNT }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    blob_endpoint: ${{ env.BLOB_ENDPOINT }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    github_repo: ${{ env.REPO_NAME }}" >> ./ansible/inventories/azure_rm.yaml
          # Don't echo the token directly to protect it from logs
          echo "    github_runner_token: ***" >> ./ansible/inventories/azure_rm.yaml
          # But actually insert it into the file securely
          sed -i "s/github_runner_token: \*\*\*/github_runner_token: ${{ env.RUNNER_TOKEN }}/" ./ansible/inventories/azure_rm.yaml
          echo "    mongodb_connection_string: ${{ env.MONGODB_CONNECTION_STRING }}" >> ./ansible/inventories/azure_rm.yaml

          # Debug - show the inventory file (masking sensitive data)
          echo "Generated inventory file (with sensitive data masked):"
          cat ./ansible/inventories/azure_rm.yaml | sed 's/github_runner_token: .*/github_runner_token: ***/'

          echo "Waiting for SSH to be available..."
          sleep 60

          # Run app-server playbook
          ANSIBLE_CONFIG=./ansible/ansible.cfg ansible-playbook -i ./ansible/inventories/azure_rm.yaml ./ansible/playbooks/app-server.yaml

  # Configure servers with Ansible
  configure-servers:
    name: Configure Servers with Ansible
    needs: [check-changes, deploy-infrastructure]
    if: ${{ always() && needs.check-changes.outputs.run_ansible == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped') }}
    runs-on: ubuntu-latest
    env:
      BASTION_IP: ${{ needs.deploy-infrastructure.outputs.BASTION_IP }}
      APP_IP: ${{ needs.deploy-infrastructure.outputs.APP_IP }}
      MONGODB_CONNECTION_STRING: ${{ needs.deploy-infrastructure.outputs.MONGODB_CONNECTION_STRING }}
      STORAGE_ACCOUNT: ${{ needs.deploy-infrastructure.outputs.STORAGE_ACCOUNT }}
      BLOB_ENDPOINT: ${{ needs.deploy-infrastructure.outputs.BLOB_ENDPOINT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Use the shared SSH setup action
      - name: Set up SSH keys
        uses: ./.github/actions/setup-ssh
        with:
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Check environment variables
      - name: Check environment variables
        run: |
          echo "Bastion IP: ${{ env.BASTION_IP }}"
          echo "App IP: ${{ env.APP_IP }}"

          # Fail early if variables are missing
          if [ -z "${{ env.BASTION_IP }}" ] || [ -z "${{ env.APP_IP }}" ]; then
            # If infrastructure was skipped, use the hardcoded values
            echo "Using hardcoded values from Azure infrastructure..."
            echo "BASTION_IP=137.116.232.168" >> $GITHUB_ENV
            echo "APP_IP=10.0.2.4" >> $GITHUB_ENV
          fi

      # Generate new runner token
      - name: Generate new runner token
        run: |
          TOKEN=$(curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO_NAME }}/actions/runners/registration-token \
            | jq -r .token)

          echo "RUNNER_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "New token generated!"

      - name: Debug environment variables
        run: |
          echo "Environment variables:"
          echo "BASTION_IP: ${{ env.BASTION_IP }}"
          echo "APP_IP: ${{ env.APP_IP }}"
          echo "PROJECT_NAME: ${{ env.PROJECT_NAME }}"
          echo "STORAGE_ACCOUNT: ${{ env.STORAGE_ACCOUNT }}"
          echo "BLOB_ENDPOINT: ${{ env.BLOB_ENDPOINT }}"
          echo "REPO_NAME: ${{ env.REPO_NAME }}"
          echo "RUNNER_TOKEN available: ${{ env.RUNNER_TOKEN != '' }}"
          echo "RUNNER_TOKEN length: ${#RUNNER_TOKEN}"

      # Verify ansible.cfg exists and has correct settings
      - name: Verify ansible.cfg
        run: |
          if [ ! -f ./ansible/ansible.cfg ]; then
            echo "Creating ansible.cfg..."
            mkdir -p ./ansible
            echo "[defaults]" > ./ansible/ansible.cfg
            echo "host_key_checking = False" >> ./ansible/ansible.cfg
            echo "roles_path = ./ansible/roles" >> ./ansible/ansible.cfg
          else
            echo "ansible.cfg already exists:"
            cat ./ansible/ansible.cfg
          fi

          echo "ANSIBLE_CONFIG=./ansible/ansible.cfg" >> $GITHUB_ENV

      # Configure servers using Ansible
      - name: Run Ansible configuration
        run: |
          # Create ansible inventory
          echo "Creating Ansible inventory..."
          mkdir -p ./ansible/inventories

          if [ -z "${{ env.APP_IP }}" ] || [ -z "${{ env.BASTION_IP }}" ]; then
            echo "ERROR: App IP or Bastion IP is missing!"
            echo "App IP: '${{ env.APP_IP }}'"
            echo "Bastion IP: '${{ env.BASTION_IP }}'"
            echo "Using hardcoded values..."
            APP_IP="10.0.2.4"
            BASTION_IP="137.116.232.168"
          else
            APP_IP="${{ env.APP_IP }}"
            BASTION_IP="${{ env.BASTION_IP }}"
          fi

          echo "Using App IP: $APP_IP"
          echo "Using Bastion IP: $BASTION_IP"

          # Create inventory file
          echo "all:" > ./ansible/inventories/azure_rm.yaml
          echo "  hosts:" >> ./ansible/inventories/azure_rm.yaml
          echo "    app_server:" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_host: $APP_IP" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_user: azureuser" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_ssh_private_key_file: ~/.ssh/id_clofresvagcupg02" >> ./ansible/inventories/azure_rm.yaml
          echo "      ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@$BASTION_IP\"'" >> ./ansible/inventories/azure_rm.yaml
          echo "  vars:" >> ./ansible/inventories/azure_rm.yaml
          echo "    project_name: ${{ env.PROJECT_NAME }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    storage_account: ${{ env.STORAGE_ACCOUNT }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    blob_endpoint: ${{ env.BLOB_ENDPOINT }}" >> ./ansible/inventories/azure_rm.yaml
          echo "    github_repo: ${{ env.REPO_NAME }}" >> ./ansible/inventories/azure_rm.yaml
          # Don't echo the token directly to protect it from logs
          echo "    github_runner_token: ***" >> ./ansible/inventories/azure_rm.yaml
          # But actually insert it into the file securely
          sed -i "s/github_runner_token: \*\*\*/github_runner_token: ${{ env.RUNNER_TOKEN }}/" ./ansible/inventories/azure_rm.yaml
          echo "    mongodb_connection_string: ${{ env.MONGODB_CONNECTION_STRING }}" >> ./ansible/inventories/azure_rm.yaml

          # Debug - show the inventory file (masking sensitive data)
          echo "Generated inventory file (masked):"
          cat ./ansible/inventories/azure_rm.yaml | sed 's/github_runner_token: .*/github_runner_token: ***/'

          echo "Waiting for SSH to be available..."
          sleep 60

          # Run app-server playbook
          ANSIBLE_CONFIG=./ansible/ansible.cfg ansible-playbook -i ./ansible/inventories/azure_rm.yaml ./ansible/playbooks/app-server.yaml

  # Deploy application to the app server
  deploy-app:
    name: Deploy Application
    needs: [check-changes, deploy-infrastructure, configure-servers]
    if: ${{ needs.check-changes.outputs.run_webapp == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped') }}
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore ./WebbApp/MVC_TestApp.csproj

      - name: Build
        run: dotnet build ./WebbApp/MVC_TestApp.csproj --configuration Release --no-restore

      - name: Publish
        run: dotnet publish ./WebbApp/MVC_TestApp.csproj --configuration Release --no-build --output ./publish

      - name: Deploy to app server
        run: |
          # Since we're running on the app server directly as a self-hosted runner,
          # we can just copy the files to the wwwroot directory
          sudo mkdir -p /var/www/app
          sudo cp -r ./publish/* /var/www/app/
          sudo chown -R www-data:www-data /var/www/app
          sudo chmod -R 755 /var/www/app

          # Restart the service
          sudo systemctl restart webapp.service
          echo "Application deployed and service restarted"

      - name: Verify deployment
        run: |
          # Wait for the app to start up
          sleep 5

          # Check if the service is running
          sudo systemctl status webapp.service || true
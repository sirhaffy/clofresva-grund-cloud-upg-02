name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_ansible:
        description: 'Skip Ansible configuration'
        required: false
        default: 'false'
      full_deployment:
        description: 'Run full infrastructure deployment'
        required: false
        default: 'false'

env:
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  LOCATION: northeurope
  REPO_NAME: ${{ secrets.REPO_NAME }}
  RUNNER_TOKEN: ${{ secrets.RUNNER_TOKEN }}

jobs:
  check-changes:
    name: Check Changed Files
    runs-on: ubuntu-latest
    outputs:
      run_infra: ${{ steps.filter.outputs.infra }}
      run_webapp: ${{ steps.filter.outputs.webapp }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Set outputs based on changed files
        id: filter
        run: |
          # Default to not running infra unless specified
          echo "infra=${{ github.event.inputs.full_deployment == 'true' }}" >> $GITHUB_OUTPUT
          echo "webapp=true" >> $GITHUB_OUTPUT

          # Check if infrastructure files were changed
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == infrastructure/* || $file == ansible/* || $file == .github/workflows/* ]]; then
              echo "infra=true" >> $GITHUB_OUTPUT
              break
            fi
          done

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: check-changes
    if: ${{ needs.check-changes.outputs.run_infra == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      BASTION_IP: ${{ steps.outputs.outputs.BASTION_IP }}
      PROXY_IP: ${{ steps.outputs.outputs.PROXY_IP }}
      APP_IP: ${{ steps.outputs.outputs.APP_IP }}
      STORAGE_ACCOUNT: ${{ steps.outputs.outputs.STORAGE_ACCOUNT }}
      BLOB_ENDPOINT: ${{ steps.outputs.outputs.BLOB_ENDPOINT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_clofresvagcupg02
          chmod 600 ~/.ssh/id_clofresvagcupg02
          ssh-keygen -y -f ~/.ssh/id_clofresvagcupg02 > ~/.ssh/id_clofresvagcupg02.pub

          # Disable strict host key checking
          cat > ~/.ssh/config << EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config

      - name: Generate fresh runner token
        id: generate_token
        run: |
          echo "Getting fresh runner token..."
          TOKEN=$(curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ env.REPO_NAME }}/actions/runners/registration-token \
            | jq -r .token)

          echo "RUNNER_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "Fresh token generated!"

      - name: Deploy Infrastructure
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./infrastructure/bicep/main.bicep
          parameters: >
            projectName=${{ env.PROJECT_NAME }}
            adminUsername=azureuser
            sshPublicKey="${{ secrets.SSH_PUBLIC_KEY }}"
            location=${{ env.LOCATION }}
          deploymentName: main

      - name: Get Deployment Outputs
        id: outputs
        run: |
          echo "Getting deployment outputs..."
          DEPLOYMENT_OUTPUTS=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "main" \
            --query properties.outputs -o json)

          # Extract values from outputs
          BASTION_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.bastionHostIp.value')
          PROXY_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.reverseProxyIp.value')
          APP_IP=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.appServerPrivateIp.value')
          STORAGE_ACCOUNT=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.storageAccountName.value')
          BLOB_ENDPOINT=$(echo $DEPLOYMENT_OUTPUTS | jq -r '.blobEndpoint.value')

          # Set GitHub environment variables
          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_ENV
          echo "PROXY_IP=$PROXY_IP" >> $GITHUB_ENV
          echo "APP_IP=$APP_IP" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV
          echo "BLOB_ENDPOINT=$BLOB_ENDPOINT" >> $GITHUB_ENV

          # Set outputs for other jobs
          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_OUTPUT
          echo "PROXY_IP=$PROXY_IP" >> $GITHUB_OUTPUT
          echo "APP_IP=$APP_IP" >> $GITHUB_OUTPUT
          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "BLOB_ENDPOINT=$BLOB_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Run Ansible (Only App Server Setup)
        if: ${{ github.event.inputs.skip_ansible != 'true' }}
        run: |
          # Create fresh token for runner.
          echo "Getting fresh runner token and running app server setup (ansible)..."
          cat > ./ansible/inventories/azure_rm.yml << EOF
          all:
            hosts:
              app_server:
                ansible_host: ${{ env.APP_IP }}
                ansible_user: azureuser
                ansible_ssh_private_key_file: ~/.ssh/id_clofresvagcupg02
                ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@${{ env.BASTION_IP }}"'
            vars:
              project_name: ${{ env.PROJECT_NAME }}
              storage_account: ${{ env.STORAGE_ACCOUNT }}
              blob_endpoint: ${{ env.BLOB_ENDPOINT }}
              github_repo: ${{ env.REPO_NAME }}
              github_runner_token: ${{ env.RUNNER_TOKEN }}
              mongodb_connection_string: ${{ env.MONGODB_CONNECTION_STRING }}
          EOF

          echo "Waiting for SSH to be available..."
          sleep 60

          # Endast köra app-server playbook istället för site.yml som innehåller allt
          ansible-playbook -i ./ansible/inventories/azure_rm.yml ./ansible/playbooks/app-server.yml || echo "Ansible problem encountered, continuing with app deployment"

  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [check-changes, deploy-infrastructure]
    if: ${{ always() && needs.check-changes.outputs.run_webapp == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build Web App
        run: |
          dotnet publish ./WebbApp/MVC_TestApp.csproj -c Release -o ./publish

      - name: Upload App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: ./publish
          retention-days: 1

  deploy-to-server:
    name: Deploy to Server
    needs: [deploy-app, deploy-infrastructure]
    runs-on: ubuntu-latest
    env:
      BASTION_IP: ${{ needs.deploy-infrastructure.outputs.BASTION_IP }}
      APP_IP: ${{ needs.deploy-infrastructure.outputs.APP_IP }}
    steps:
      - name: Check environment variables
        run: |
          echo "Bastion IP: ${{ env.BASTION_IP }}"
          echo "App IP: ${{ env.APP_IP }}"

          # Fail early if variables are missing
          if [ -z "${{ env.BASTION_IP }}" ] || [ -z "${{ env.APP_IP }}" ]; then
            # If infrastructure was skipped, use the hardcoded values
            echo "Using hardcoded values from Azure infrastructure..."
            echo "BASTION_IP=137.116.232.168" >> $GITHUB_ENV
            echo "APP_IP=10.0.2.4" >> $GITHUB_ENV
          fi

      - name: Set up SSH keys and scan hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_clofresvagcupg02
          chmod 600 ~/.ssh/id_clofresvagcupg02

          # Skapa en SSH-config för att ignorera hostkey verification
          cat > ~/.ssh/config << EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config

          # Vänta lite innan SSH-anslutning försöks
          echo "Waiting 10 seconds before trying to connect..."
          sleep 10

          # Testa SSH-anslutning till bastion med debug info
          echo "Testing SSH connection to bastion..."
          ssh -vvv -i ~/.ssh/id_clofresvagcupg02 azureuser@${{ env.BASTION_IP }} "echo 'Bastion connection successful!'" || echo "Bastion connection failed but continuing"

      - name: Download App Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp
          path: ./webapp-files

      - name: Create target directory and deploy app with fallback mechanisms
        run: |
          # Förbered lokal katalog
          mkdir -p ./webapp-files

          # Skapa ~/.ssh/known_hosts om den inte finns
          touch ~/.ssh/known_hosts

          # Rensa eventuella gamla nycklar för samma IP-adresser
          ssh-keygen -R ${{ env.BASTION_IP }} || true

          # Lägg till bastionens värdnyckel
          echo "Adding bastion host key..."
          ssh-keyscan -H ${{ env.BASTION_IP }} >> ~/.ssh/known_hosts || true

          # Skapa mål-katalog på servern
          echo "Creating target directory on remote server..."
          ssh -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@${{ env.BASTION_IP }}" -i ~/.ssh/id_clofresvagcupg02 azureuser@${{ env.APP_IP }} "sudo mkdir -p /tmp/webapp && sudo chown azureuser:azureuser /tmp/webapp"

          echo "Copying files to remote server..."
          scp -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@${{ env.BASTION_IP }}" -i ~/.ssh/id_clofresvagcupg02 -r ./webapp-files/* azureuser@${{ env.APP_IP }}:/tmp/webapp/

          echo "Deploying files on app server..."
          ssh -o ConnectTimeout=10 -o ProxyCommand="ssh -W %h:%p -i ~/.ssh/id_clofresvagcupg02 azureuser@${{ env.BASTION_IP }}" -i ~/.ssh/id_clofresvagcupg02 azureuser@${{ env.APP_IP }} "
            sudo mkdir -p /var/www/app
            sudo cp -r /tmp/webapp/* /var/www/app/
            sudo chown -R www-data:www-data /var/www/app
            sudo systemctl restart webapp.service || echo 'Failed to restart service, may not be running yet'
            echo 'Application deployed!'
          "
---
- name: Configure App Server
  hosts: app_server
  become: yes # Run as root
  tasks:
    # Add .NET 9.0 backports repository
    - name: Add .NET 9.0 backports repository
      apt_repository:
        repo: "ppa:dotnet/backports"
        state: present
      register: repo_added
      when: ansible_os_family == "Debian"

    # Update apt cache
    - name: Update apt cache
      apt:
        update_cache: yes
      register: apt_updated
      when: ansible_os_family == "Debian"

    # Install ASP.NET Core Runtime (try 9.0)
    - name: Install ASP.NET Core Runtime (try 9.0)
      apt:
        name: aspnetcore-runtime-9.0
        state: present
      register: dotnet_installed
      ignore_errors: yes
      when: ansible_os_family == "Debian"

    # Install ASP.NET Core Runtime (fallback to 8.0 if 9.0 fails)
    - name: Install ASP.NET Core Runtime (fallback to 8.0 if 9.0 fails)
      apt:
        name: aspnetcore-runtime-8.0
        state: present
      when: dotnet_installed is failed and ansible_os_family == "Debian"

    # Stop web app service if running
    - name: Stop web app service if running
      systemd:
        name: webapp
        state: stopped
      failed_when: false

    # Create app directory
    - name: Create app directory
      file:
        path: /var/www/app
        state: directory
        mode: '0755'
        owner: www-data
        group: www-data

    - name: Debug variables
      debug:
        msg:
          - "storage_account: {{ storage_account | default('not set') }}"
          - "blob_endpoint: {{ blob_endpoint | default('not set') }}"
          - "container_name: {{ container_name | default('not set') }}"
          - "mongodb_connection_string length: {{ mongodb_connection_string | length if mongodb_connection_string is defined else 0 }}"

    # Decode MongoDB connection string
    - name: Decode MongoDB connection string
      set_fact:
        mongodb_connection_string: "{{ mongodb_connection_string_base64 | b64decode }}"
      when: mongodb_connection_string_base64 is defined and mongodb_connection_string_base64 != '' and mongodb_connection_string_base64 | length > 10
      no_log: true
      ignore_errors: yes

    - name: Debug MongoDB connection string (without revealing sensitive data)
      debug:
        msg: "MongoDB connection string is {{ 'VALID (length: ' + (mongodb_connection_string | length | string) + ')' if mongodb_connection_string is defined and mongodb_connection_string | length > 20 else 'INVALID OR EMPTY' }}"

    - name: Debug MongoDB connection string length
      debug:
        msg: "MongoDB connection string length: {{ mongodb_connection_string | length if mongodb_connection_string is defined else 0 }}"

    # Fallback if not provided
    - name: Set empty MongoDB connection string if not provided
      set_fact:
        mongodb_connection_string: ""
      when: mongodb_connection_string is not defined

    # Create app settings with MongoDB connection
    - name: Create application settings file
      template:
        src: templates/appsettings.json.j2
        dest: /var/www/app/appsettings.json
        owner: www-data
        group: www-data
        mode: '0644'
      register: app_settings_result
      changed_when: true
      notify: restart webapp service

    # Verify application settings file
    - name: Verify application settings file
      command: cat /var/www/app/appsettings.json
      register: app_settings_content
      changed_when: false # Does not change the system

    # Create web app service
    - name: Create app service file
      copy:
        content: |
          [Unit]
          Description=.NET Web App
          After=network.target

          [Service]
          WorkingDirectory=/var/www/app
          ExecStart=/usr/bin/dotnet /var/www/app/MVC_TestApp.dll
          Restart=always
          RestartSec=15
          User=www-data
          Group=www-data
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://0.0.0.0:5000

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/webapp.service
        owner: root
        group: root
        mode: '0644'
      notify: restart webapp service

    # Open port for web service
    - name: Open port 5000 in firewall
      ufw:
        rule: allow
        port: '5000'
        proto: tcp

    # Install required dependencies for GitHub Actions Runner.
    - name: Install required dependencies for GitHub Actions runner
      apt:
        name:
          - curl
          - jq
          - sudo
          - tar
          - git
        state: present
      register: dependencies_installed

    # Download the GitHub Actions runner.
    - name: Download GitHub Actions runner
      get_url:
        url: https://github.com/actions/runner/releases/download/v2.311.0/actions-runner-linux-x64-2.311.0.tar.gz
        dest: /tmp/actions-runner-linux-x64-2.311.0.tar.gz
        mode: '0644'
        force: no  # Only download if it doesn't exist
      register: runner_download

    # Create GitHub Actions runner directory
    - name: Create GitHub Actions runner directory
      file:
        path: /opt/actions-runner
        state: directory
        mode: '0755'
        owner: azureuser
        group: azureuser
      register: directory_created

    # Extract GitHub Actions runner
    - name: Extract GitHub Actions runner
      unarchive:
        src: /tmp/actions-runner-linux-x64-2.311.0.tar.gz
        dest: /opt/actions-runner
        remote_src: yes
        owner: azureuser
        group: azureuser
        mode: '0755'
        creates: /opt/actions-runner/run.sh  # Skip if already extracted
      register: extract_result

    # Configure GitHub Actions runner
    - name: Configure GitHub Actions runner
      become: yes
      become_user: azureuser
      shell: |
        cd /opt/actions-runner

        if [ -f ".runner" ]; then
          echo "Removing existing runner configuration"
          ./config.sh remove --token "{{ github_runner_token }}" || echo "Failed to remove runner, continuing anyway"
          rm -f .runner .credentials || echo "Failed to remove runner files, continuing anyway"
        fi

        echo "Configuring runner with token for {{ github_repo }}"
        ./config.sh --url https://github.com/{{ github_repo }} --token {{ github_runner_token }} --name app-server-runner --labels self-hosted --unattended --replace
      args:
        executable: /bin/bash
      register: config_result
      failed_when: false

    # Install GitHub Actions runner as a service.
    - name: Install GitHub Actions runner as a service
      become: yes
      shell: |
        cd /opt/actions-runner
        ./svc.sh install azureuser || true
      args:
        executable: /bin/bash
      register: service_install
      failed_when: false

    # Enable and start GitHub Actions runner service
    - name: Enable GitHub Actions runner service
      systemd:
        name: actions.runner.*
        state: started
        enabled: yes
        daemon_reload: yes
      register: service_enabled
      failed_when: false

    # Create a diagnostic file with all relevant information
    - name: Create diagnostic file
      become: yes
      copy:
        content: |
          # GitHub Runner Diagnostics
          Generated: {{ ansible_date_time.iso8601 }}

          ## System Information
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Hostname: {{ ansible_hostname }}

          ## Runner Information
          GitHub Repository: {{ github_repo }}
          Runner Token Available: {{ 'Yes' if github_runner_token else 'No' }}

          ## Dotnet Status
          Dotnet Installation: {{ 'Success' if not dotnet_installed.failed else 'Failed' }}

          ## Runner Installation Steps
          Dependencies: {{ 'Success' if dependencies_installed.changed == false else 'Changed' }}
          Runner Download: {{ 'Success' if runner_download.changed == false else 'Changed' }}
          Directory Created: {{ 'Success' if directory_created.changed == false else 'Changed' }}
          Runner Extracted: {{ 'Success' if extract_result.changed == false else 'Changed' }}
          Runner Configured: {{ 'Success' if config_result.rc == 0 else 'Failed' }}
          Service Installed: {{ 'Success' if service_install.rc == 0 else 'Failed' }}
        dest: /opt/runner-diagnostics.txt
        owner: azureuser
        group: azureuser
        mode: '0644'

  handlers:
    # Restart webapp service
    - name: restart webapp service
      systemd:
        name: webapp
        state: restarted
        daemon_reload: yes
        enabled: yes
      become: true

    # Wait for service to start.
    - name: wait for service to start
      pause:
        seconds: 5
      listen: restart webapp service
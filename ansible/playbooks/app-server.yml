---
- name: Configure App Server
  hosts: app_server
  become: yes # Run tasks as root
  tasks:
    # Add .NET 9.0 backports repository
    - name: Add .NET 9.0 backports repository
      apt_repository:
        repo: "ppa:dotnet/backports"
        state: present
      register: repo_added
      when: ansible_os_family == "Debian"

    # Debug repository output
    - name: Debug repository output
      debug:
        var: repo_added
      when: ansible_os_family == "Debian"

    # Update apt cache
    - name: Update apt cache
      apt:
        update_cache: yes
      register: apt_updated
      when: ansible_os_family == "Debian"

    # Debug apt update output
    - name: Debug apt update output
      debug:
        var: apt_updated
      when: ansible_os_family == "Debian"

    # List available .NET packages
    - name: List available .NET packages
      shell: apt-cache search dotnet | grep -i runtime
      register: dotnet_packages
      changed_when: false
      when: ansible_os_family == "Debian"

    # Debug available .NET packages
    - name: Show available .NET packages
      debug:
        var: dotnet_packages.stdout_lines
      when: ansible_os_family == "Debian"

    # Install ASP.NET Core Runtime (try 9.0)
    - name: Install ASP.NET Core Runtime (try 9.0)
      apt:
        name: aspnetcore-runtime-9.0
        state: present
      register: dotnet_installed
      ignore_errors: yes
      when: ansible_os_family == "Debian"

    # Install ASP.NET Core Runtime (fallback to 8.0 if 9.0 fails)
    - name: Install ASP.NET Core Runtime (fallback to 8.0 if 9.0 fails)
      apt:
        name: aspnetcore-runtime-8.0
        state: present
      when: dotnet_installed is failed and ansible_os_family == "Debian"

    # Create app directory
    - name: Create app directory
      file:
        path: /var/www/app
        state: directory
        mode: '0755'
        owner: www-data
        group: www-data

    # Configure blob storage settings
    - name: Configure blob storage settings
      copy:
        content: |
          {
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft": "Warning",
                "Microsoft.Hosting.Lifetime": "Information"
              }
            },
            "AllowedHosts": "*",
            "BlobStorage": {
              "ConnectionString": "DefaultEndpointsProtocol=https;AccountName={{ storage_account }};EndpointSuffix=core.windows.net",
              "ContainerName": "appdata",
              "BlobEndpoint": "{{ blob_endpoint }}"
            }
          }
        dest: /var/www/app/appsettings.Production.json
        owner: www-data
        group: www-data
        mode: '0644'

    # Create web app service
    - name: Create app service file
      copy:
        content: |
          [Unit]
          Description=.NET Web App
          After=network.target

          [Service]
          WorkingDirectory=/var/www/app
          ExecStart=/usr/bin/dotnet /var/www/app/WebbApp.dll
          Restart=always
          RestartSec=15
          User=www-data
          Group=www-data
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://0.0.0.0:5000

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/webapp.service
        owner: root
        group: root
        mode: '0644'

    # Open port for web service
    - name: Open port 5000 in firewall
      ufw:
        rule: allow
        port: '5000'
        proto: tcp

    # GITHUB ACTIONS RUNNER SETUP
    # Install required dependencies for GitHub Actions runner
    - name: Install required dependencies for GitHub Actions runner
      apt:
        name:
          - curl
          - jq
          - sudo
          - tar
          - git
        state: present
      register: dependencies_installed

    - name: Debug dependencies installation
      debug:
        var: dependencies_installed

    # Download the GitHub Actions runner
    - name: Download GitHub Actions runner
      get_url:
        url: https://github.com/actions/runner/releases/download/v2.311.0/actions-runner-linux-x64-2.311.0.tar.gz
        dest: /tmp/actions-runner-linux-x64-2.311.0.tar.gz
        mode: '0644'
        force: yes  # Always download new file
      register: runner_download

    - name: Debug runner download
      debug:
        var: runner_download

    # Fixa problem med runner-katalogen
    - name: Remove existing actions-runner directory if it exists
      file:
        path: /opt/actions-runner
        state: absent
      when: runner_download.changed

    # Create GitHub Actions runner directory
    - name: Create GitHub Actions runner directory
      file:
        path: /opt/actions-runner
        state: directory
        mode: '0755'
        owner: azureuser
        group: azureuser
      register: directory_created

    - name: Debug directory creation
      debug:
        var: directory_created

    # Extract GitHub Actions runner
    - name: Extract GitHub Actions runner
      unarchive:
        src: /tmp/actions-runner-linux-x64-2.311.0.tar.gz
        dest: /opt/actions-runner
        remote_src: yes
        owner: azureuser
        group: azureuser
        mode: '0755'
      register: extract_result

    - name: Debug extraction result
      debug:
        var: extract_result

    # Check if runner is already configured
    - name: Check if runner is already configured
      stat:
        path: /opt/actions-runner/.runner
      register: runner_configured

    - name: Debug runner configuration check
      debug:
        var: runner_configured

    # Configure GitHub Actions runner
    - name: Configure GitHub Actions runner
      become: yes
      become_user: azureuser
      shell: |
        set -x  # Echo commands for better debugging
        cd /opt/actions-runner

        echo "Current directory content:"
        ls -la

        echo "GitHub repo: {{ REPO_NAME }}"
        echo "Token available: {{ 'Yes' if github_runner_token else 'No' }}"

        if [ -f ".runner" ]; then
          echo "Removing existing runner configuration"
          ./config.sh remove --token "{{ github_runner_token }}" || echo "Failed to remove runner, continuing anyway"
          rm -f .runner .credentials || echo "Failed to remove runner files, continuing anyway"
        fi

        echo "Configuring runner with token for {{ REPO_NAME }}"
        ./config.sh --url https://github.com/{{ REPO_NAME }} --token {{ github_runner_token }} --name app-server-runner --labels self-hosted --unattended --replace

        echo "Configuration result: $?"
        echo "Runner files after configuration:"
        ls -la
      args:
        executable: /bin/bash
      register: config_result
      failed_when: false

    # Install GitHub Actions runner as a service
    - name: Install GitHub Actions runner as a service
      become: yes
      shell: |
        cd /opt/actions-runner
        ./svc.sh install azureuser || true
      args:
        executable: /bin/bash
      register: service_install
      failed_when: false

    - name: Debug service installation
      debug:
        var: service_install

    # Enable and start GitHub Actions runner service
    - name: Enable GitHub Actions runner service
      systemd:
        name: actions.runner.*
        state: started
        enabled: yes
        daemon_reload: yes
      register: service_enabled
      failed_when: false

    - name: Debug service enable result
      debug:
        var: service_enabled

    # Verify runner service is running
    - name: Check runner service status
      shell: systemctl status actions.runner.* || true
      register: service_status
      changed_when: false
      failed_when: false

    - name: Debug service status
      debug:
        var: service_status.stdout_lines

    # Create a diagnostic file with all relevant information
    - name: Create diagnostic file
      become: yes
      copy:
        content: |
          # GitHub Runner Diagnostics
          Generated: {{ ansible_date_time.iso8601 }}

          ## System Information
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Hostname: {{ ansible_hostname }}

          ## Runner Information
          GitHub Repository: {{ REPO_NAME }}
          Runner Token Available: {{ 'Yes' if github_runner_token else 'No' }}

          ## Dotnet Status
          Dotnet Installation: {{ 'Success' if not dotnet_installed.failed else 'Failed' }}

          ## Runner Installation Steps
          Dependencies: {{ 'Success' if dependencies_installed.changed == false else 'Changed' }}
          Runner Download: {{ 'Success' if runner_download.changed == false else 'Changed' }}
          Directory Created: {{ 'Success' if directory_created.changed == false else 'Changed' }}
          Runner Extracted: {{ 'Success' if extract_result.changed == false else 'Changed' }}
          Runner Configured: {{ 'Success' if config_result.rc == 0 else 'Failed' }}
          Service Installed: {{ 'Success' if service_install.rc == 0 else 'Failed' }}

          ## Configuration Output
          {{ config_result.stdout }}

          ## Service Status
          {{ service_status.stdout }}
        dest: /opt/runner-diagnostics.txt
        owner: azureuser
        group: azureuser
        mode: '0644'